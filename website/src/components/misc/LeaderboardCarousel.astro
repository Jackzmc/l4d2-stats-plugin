---
import { topStats, TOP_STAT_NAMES } from "@/models/General.ts";

const stats = await topStats() 
// Astro.response.headers.set("Cache-Control", "public, max-age=86400")
---
<div class="carousel">
    {Object.entries(stats).map(([key, list]) => 
        <div class="carousel-page">
            <!-- @ts-ignore -->
            <h4 class="title is-4 has-text-centered mb-4">{TOP_STAT_NAMES[key]}</h4>
            <table class="table is-fullwidth is-narrow">
                <!-- @ts-ignore -->
                {list.map(entry => 
                    <tr>
                        <th><a href={`/users/${entry.steamid}`}>{entry.name}</a></th>
                        <td>{entry.value.toLocaleString()} times</td>
                    </tr>
                )}
            </table>
        </div>
    )}
    <div class="buttons">
        {Object.keys(stats).map((key,i) => 
            /* @ts-ignore */
            <div class="button is-rounded" data-index={i} title={TOP_STAT_NAMES[key]}>
                
            </div>
        )}
    </div>
</div>

<style>
.carousel-page {
    transition: height 2s, opacity 2s;
    opacity: 0;
    visibility: hidden;
    height: 0;
}
.carousel-page.active {
    opacity: 1;
    visibility: visible;
    height: auto;
}
</style>

<script>
const SECONDS_PER_PAGE = 30
const carouselPages = [...document.querySelectorAll<HTMLElement>("div.carousel .carousel-page")]
const carouselButtons = document.querySelectorAll<HTMLElement>("div.carousel .buttons .button")
let activePage = carouselPages[0]
activePage.classList.add("active")
let index = 0

function changePage() {
    index++
    if(index >= carouselPages.length) index = 0

    setPage(index)
}

function setPage(index: number) {
    const page = carouselPages[index]
    activePage.classList.remove("active")
    page.classList.add("active")
    activePage = page
}

// Setup button links
for(const button of carouselButtons) {
    const index = button.dataset.index
    if(!index) continue
    button.addEventListener("click", () => setPage(Number(index)))
}

// Setup change timer
setInterval(() => changePage(), 1000 * SECONDS_PER_PAGE)
changePage()
</script>