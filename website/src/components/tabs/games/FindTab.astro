---
import BulmaIcon from "@/components/bulma/BulmaIcon.astro";
import Button from "@/components/bulma/Button.astro";
import Field from "@/components/bulma/Field.astro";
import Level from "@/components/bulma/Level.astro";
import LevelItem from "@/components/bulma/LevelItem.astro";
import Select from "@/components/bulma/Select.astro";
import SimplePagination from "@/components/bulma/SimplePagination.astro";
import MapBox from "@/components/misc/MapBox.astro";
import { getGamemodes, getServerTags, getFilteredGames } from "@/models/Game.ts";

const [gamemodes, tags] = await Promise.all([getGamemodes(), getServerTags()]) 

const queryTag = Astro.url.searchParams.get("tag")
const queryMapType = Astro.url.searchParams.get("map_type")
const queryGamemode = Astro.url.searchParams.get("gamemode")
const queryDifficulty = Astro.url.searchParams.get("difficulty")
const queryMap = Astro.url.searchParams.get("map")
const page = Astro.url.searchParams.has("page") ? Number(Astro.url.searchParams.get("page")) : 1

// Have user press 'Search' at least once before we load anything 
const shouldLoad = queryGamemode != undefined || queryMapType != undefined || queryGamemode != undefined || queryDifficulty != undefined || queryTag != undefined

const games = shouldLoad ? await getFilteredGames({
    gamemode: queryGamemode,
    tag: queryTag,
    map_type: Number(queryMapType),
    difficulty: Number(queryDifficulty),
    map: queryMap
}, page) : []
---
<form id="find_game" method="get" class="box">
<Level centered={false}>
    <Fragment slot="left">
        <LevelItem>
            <Field label="Server Tag">
                <Select name="tag" selected={queryTag} items={tags} anyOption={{}} />
            </Field>
        </LevelItem>
        <LevelItem>
            <Field label="Map Type">
                <Select name="map_type" selected={queryMapType} items={[
                    {value: "", label: "Any"},
                    {value: "0", label: "Official Maps"},
                    {value: "1", label: "Custom Maps"},
                ]} />
            </Field>
        </LevelItem>
        <LevelItem>
            <Field label="Gamemode">
                <Select name="gamemode" items={gamemodes} selected={queryGamemode} anyOption={{}} />
            </Field>
        </LevelItem>
        <LevelItem>
            <Field label="Difficulty">
                <Select name="difficulty" selected={queryDifficulty} items={[
                    {value: "", label: "Any"},
                    {value: "0", label: "Easy"},
                    {value: "1", label: "Normal"},
                    {value: "2", label: "Advanced"},
                    {value: "3", label: "Expert"},
                ]} />
            </Field>
        </LevelItem>
        <LevelItem>
            <Field label="Map ID">
                <input class="input" type="text" name="map" value={queryMap} placeholder="c1m1_hotel" />
            </Field>
        </LevelItem>
        <LevelItem>
            <Field label="&nbsp;">
                <Button type="is-link">
                    <BulmaIcon textLeft="Search" name="iconoir:arrow-right" />
                </Button>
            </Field>
        </LevelItem>
    </Fragment>
</Level>
</form>
<div class="block has-text-centered ">
    <SimplePagination currentPage={page} />
</div>

<div class="grid is-col-min-12">
    {games.map(game => 
        <div class="cell is-col-min-8">
            <MapBox map={game} />
        </div>
    )}
</div>

{!shouldLoad && <div class="container has-text-centered my-6"><em>Select desired filters and press <span class="has-text-link">[ Search -&gt; ]</span> to view</em></div>}
{shouldLoad && games.length === 0 && <div class="container has-text-centered my-6"><em>No games were found with selected filters</em></div>}