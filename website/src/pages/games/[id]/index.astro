---
import Layout, { type PageInfo } from "../../../layouts/Layout.astro";
import PlayerBox from '../../../components/misc/PlayerBox.astro'
let { id } = Astro.params;
if(!id) return new Response(null, { status: 404 })
id = id.substring(0, 8)

import { getGame, getSessions } from '../../../models/Game.ts'
import { Difficulty } from "../../../types/game.ts";
import { formatUnixDate } from "../../../utils/date.ts";
import { getGamemode, getMapScreenshot } from "../../../utils/index.ts";
import Level from "../../../components/bulma/Level.astro";
import LevelItem from "../../../components/bulma/LevelItem.astro";
import { getImage } from "astro:assets";

const game = await getGame(id)
if(!game) return new Response(null, { status: 404 })
const sessions = await getSessions(id)


const meta: PageInfo = {
	title: `${game.map_name} - Game ${id}`,
	description: "",
    hero: {
        title: game.map_name,
    },
}
const totalHonks = sessions.reduce((pv, cv) => pv + cv.honks, 0)
const honkMasterPlayer = totalHonks && sessions.reduce((pv, cv) => {
    return (cv.honks > pv.honks) ? cv : pv
}).steamid
const mvpPlayer = sessions.reduce((pv, cv) => {
    return (cv.SpecialInfectedKills > pv.SpecialInfectedKills) ? cv : pv
}).steamid

const bgImage = await getImage({ src: getMapScreenshot(game.map) })

export const prerender = false
---
<Layout meta={meta}>
    <section slot="hero" class="hero has-text-centered is-dark hero-bg" style={{'background-image': `url("${bgImage.src}")`}}>
        <div class="hero-body">
            <p class="title">{meta.hero!.title}</p>
            <p class="subtitle pt-2">
                Played {formatUnixDate(game.date)}
            </p>
            <hr>
            <p class="subtitle pt-2">
                {getGamemode(game.gamemode)} • {Difficulty[game.difficulty]} • {game.duration} minutes long
            </p>
        </div>
    </section>

<section class="hero has-text-centered is-primary is-small has-text-white">
                <div class="hero-body">
                    <div class="container">
                        <Level>
                            <LevelItem class="has-text-white" title="Zombie Kills" value={game.commons_killed} />
                            <LevelItem class="has-text-white" title="Specials Killed" value={game.specials_killed} />
                            <LevelItem class="has-text-white" title="Damage Taken" value={game.damage_taken} />
                            {totalHonks > 0 && <LevelItem class="has-text-white" title="Total Honks" value={totalHonks} />}
                        </Level>
                    </div>
                </div>
            </section>
    <br>
    <section class="container pt-4 pb-5">
        <div class="fixed-grid has-5-cols">
        <div class="grid">
            {sessions.map(sess =>{
                const isMvp = sess.steamid == mvpPlayer
                const isHonkMaster = sess.steamid == honkMasterPlayer
                return <div class="cell">
                    <PlayerBox player={sess} mvp={isMvp} honkMaster={isHonkMaster} />
                </div>
            })}
        </div>
    </div>
    </section>

    <br>
    <div class="container">
        <div class="columns">
            <div class="column">
                <div class="box has-background-danger has-text-white">
                    <Level>
                        <LevelItem class="has-text-white" title="Incaps" value={game.incaps} />
                        <LevelItem class="has-text-white" title="Deaths" value={game.deaths} />
                        <LevelItem class="has-text-white" title="Kits Used" value={game.medkits_used} />
                        <LevelItem class="has-text-white" title="Pills Used" value={game.pills_used} />
                        <LevelItem class="has-text-white" title="Adrenalines Used" value={game.adrenalines_used} />
                    </Level>
                </div>
                <div class="box has-background-link has-text-white">
                    <Level>
                        <LevelItem class="has-text-white" title="Biles Thrown" value={game.biles_used} />
                        <LevelItem class="has-text-white" title="Pipes Thrown" value={game.pipes_used} />
                        <LevelItem class="has-text-white" title="Molotovs Thrown" value={game.molotovs_used} />
                    </Level>
                </div>
            </div>
            <div class="column is-2">
                <div class="box content">
                    <h4>Map Id</h4>
                    <p>{game.map}</p>
                    <h4>Server Tags</h4>
                    <span class="tags">
                        {game.server_tags.map(tag => <span class="tag">{tag}</span>)}
                    </span>
                </div>
            </div>
        </div>
        <div class="block">
            Campaign ID {game.campaignID}
        </div>
    </div>

</Layout>

<style>
.hero-bg {
    background-position: center;
}
</style>